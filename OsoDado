// OsoDado

#include <stdio.h>
#include <unistd.h>

int rollDie();
int setDiceKeep();
void printInstructions(int);
void printArray(int[], int);
void updateArray(int[], int[]);

int main() {

	int diceArray[5];
	int diceKeepArray[5] = {0, 0, 0, 0, 0};
	int diceKeepEntry;
	int inputChecker;
	int rollCount = 0;
	
	int i, x;

	while (rollCount<3) {

		updateArray(diceArray, diceKeepArray);
		//printArray(diceArray, 5);
		
		printInstructions(rollCount);
		inputChecker = 0;
		
		while (inputChecker == 0) {
			
			for(i = 0; i < 5; i++){
				if(diceKeepArray[i] == 1)
					printf(" %d  ", i + 1);
				else
					printf("    ");
			}	
			
			printf("\t| ");
			scanf("%d", &x);
			
			if (0 < x && x < 6)
				diceKeepArray[x-1] = setDiceKeep(diceKeepArray[x-1]);
			else if (x == 0)
				inputChecker = 1;
			else
				printf("Invalid input.\n");
			
		} // End input while
		
		printf("\n");
		rollCount++;
		
	} // End turn-taking for
	
    return 0;

} // End main()


void updateArray(int dice[], int keep[]) {
	int i;
	for (i = 0; i < 5; i++) {
		if (!keep[i])
			dice[i] = rand()%6;
		printf("[%d] ", dice[i]);
 	}
 	printf("\n");
}


int setDiceKeep(int i) {
	if (i == 0)
		return 1;
	else if (i == 1)
		return 0;
}


void clearArray(int ar[]) {
	int i;
	for (i = 0; i < 5; i++)
		ar[i] = 0;	
}


void printInstructions(int rollCount) {
	printf("\nTurn %d.\nEnter 1-5 to keep/abandon dice.\n\n", rollCount + 1);
}
